from collections import deque

# Undirected graph (edges are bidirectional)
graph = {
    'A': ['B', 'C'],
    'B': ['A', 'D', 'E'],
    'C': ['A', 'F'],
    'D': ['B'],
    'E': ['B', 'F'],
    'F': ['C', 'E'],
    'G': ['H'],       # Disconnected component
    'H': ['G']
}

# ------------------------- BFS (Iterative) -------------------------
def bfs_traversal(graph):
    visited = set()
    for node in graph:
        if node not in visited:
            queue = deque([node])
            visited.add(node)
            while queue:
                current = queue.popleft()
                print(current, end=" ")
                for neighbor in graph[current]:
                    if neighbor not in visited:
                        visited.add(neighbor)
                        queue.append(neighbor)
    print()

# ------------------------- DFS (Recursive) -------------------------
def dfs_traversal(graph):
    visited = set()
    def dfs_recursive(node):
        visited.add(node)
        print(node, end=" ")
        for neighbor in graph[node]:
            if neighbor not in visited:
                dfs_recursive(neighbor)
    for node in graph:
        if node not in visited:
            dfs_recursive(node)
    print()

# ------------------------- Driver Code -------------------------
print("BFS Traversal (All Vertices):")
bfs_traversal(graph)

print("\nDFS Traversal (All Vertices):")
dfs_traversal(graph)