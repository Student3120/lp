import random

def gcd(a, b):
    while b != 0:
        a, b = b, a % b
    return a

def multiplicative_inverse(e, phi):
    # Extended Euclidean Algorithm for finding modular inverse
    old_r, r = e, phi
    old_s, s = 1, 0
    old_t, t = 0, 1

    while r != 0:
        quotient = old_r // r
        old_r, r = r, old_r - quotient * r
        old_s, s = s, old_s - quotient * s
        old_t, t = t, old_t - quotient * t

    if old_r != 1:
        return None  # No inverse exists
    else:
        return old_s % phi  # Ensure positive result

def generate_keypair(p, q):
    n = p * q
    phi = (p - 1) * (q - 1)

    e = random.randrange(2, phi)  # Start from 2 to avoid e=1
    g = gcd(e, phi)

    while g != 1:
        e = random.randrange(2, phi)
        g = gcd(e, phi)

    d = multiplicative_inverse(e, phi)
    return ((e, n), (d, n))

def encrypt(pk, plaintext):
    key, n = pk
    # Use pow(base, exponent, mod) for modular exponentiation
    return [pow(ord(char), key, n) for char in plaintext]

def decrypt(pk, ciphertext):
    key, n = pk
    # Use pow for efficient decryption
    return ''.join([chr(pow(char, key, n)) for char in ciphertext])

if __name__ == '__main__':
    # Example with larger primes (must be primes!)
    p = 101  # Prime 1
    q = 103  # Prime 2
    public, private = generate_keypair(p, q)
    print("Public Key (e, n):", public)
    print("Private Key (d, n):", private)

    message = "Hello world!"
    encrypted = encrypt(public, message)
    print("Encrypted:", encrypted)

    decrypted = decrypt(private, encrypted)
    print("Decrypted:", decrypted)